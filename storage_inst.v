// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.


// Generated by Quartus Prime Version 21.1 (Build Build 850 06/23/2022)
// Created on Sun Apr 23 23:44:07 2023

storage storage_inst
(
	.clk(clk_sig) ,	// input  clk_sig
	.rst(rst_sig) ,	// input  rst_sig
	.state(state_sig) ,	// output [3:0] state_sig
	.parser_valid(parser_valid_sig) ,	// input  parser_valid_sig
	.parser_ready(parser_ready_sig) ,	// output  parser_ready_sig
	.hdr_id(hdr_id_sig) ,	// input [15:0] hdr_id_sig
	.hdr_qr(hdr_qr_sig) ,	// input  hdr_qr_sig
	.hdr_opcode(hdr_opcode_sig) ,	// input [3:0] hdr_opcode_sig
	.hdr_aa(hdr_aa_sig) ,	// input  hdr_aa_sig
	.hdr_tc(hdr_tc_sig) ,	// input  hdr_tc_sig
	.hdr_rd(hdr_rd_sig) ,	// input  hdr_rd_sig
	.hdr_ra(hdr_ra_sig) ,	// input  hdr_ra_sig
	.hdr_z(hdr_z_sig) ,	// input [2:0] hdr_z_sig
	.hdr_rcode(hdr_rcode_sig) ,	// input [3:0] hdr_rcode_sig
	.hdr_qdcount(hdr_qdcount_sig) ,	// input [15:0] hdr_qdcount_sig
	.hdr_ancount(hdr_ancount_sig) ,	// input [15:0] hdr_ancount_sig
	.hdr_nscount(hdr_nscount_sig) ,	// input [15:0] hdr_nscount_sig
	.hdr_arcount(hdr_arcount_sig) ,	// input [15:0] hdr_arcount_sig
	.hdr_source_ip(hdr_source_ip_sig) ,	// input [31:0] hdr_source_ip_sig
	.hdr_dest_ip(hdr_dest_ip_sig) ,	// input [31:0] hdr_dest_ip_sig
	.qry_name(qry_name_sig) ,	// input [2047:0] qry_name_sig
	.qry_type(qry_type_sig) ,	// input [15:0] qry_type_sig
	.qry_class(qry_class_sig) ,	// input [15:0] qry_class_sig
	.ans_type(ans_type_sig) ,	// input [15:0] ans_type_sig
	.ans_class(ans_class_sig) ,	// input [15:0] ans_class_sig
	.ans_ttl(ans_ttl_sig) ,	// input [31:0] ans_ttl_sig
	.ans_datalen(ans_datalen_sig) ,	// input [15:0] ans_datalen_sig
	.ans_addr(ans_addr_sig) ,	// input [31:0] ans_addr_sig
	.ans_addr_2(ans_addr_2_sig) ,	// input [31:0] ans_addr_2_sig
	.ans_addr_3(ans_addr_3_sig) ,	// input [31:0] ans_addr_3_sig
	.ans_addr_4(ans_addr_4_sig) ,	// input [31:0] ans_addr_4_sig
	.ans_addr_5(ans_addr_5_sig) ,	// input [31:0] ans_addr_5_sig
	.ans_addr_6(ans_addr_6_sig) ,	// input [31:0] ans_addr_6_sig
	.ans_addr_7(ans_addr_7_sig) ,	// input [31:0] ans_addr_7_sig
	.ans_addr_8(ans_addr_8_sig) ,	// input [31:0] ans_addr_8_sig
	.ans_addr_9(ans_addr_9_sig) ,	// input [31:0] ans_addr_9_sig
	.ans_addr_10(ans_addr_10_sig) ,	// input [31:0] ans_addr_10_sig
	.ans_addr_11(ans_addr_11_sig) ,	// input [31:0] ans_addr_11_sig
	.ans_addr_12(ans_addr_12_sig) ,	// input [31:0] ans_addr_12_sig
	.ans_addr_13(ans_addr_13_sig) ,	// input [31:0] ans_addr_13_sig
	.ans_addr_14(ans_addr_14_sig) ,	// input [31:0] ans_addr_14_sig
	.ans_addr_15(ans_addr_15_sig) ,	// input [31:0] ans_addr_15_sig
	.ans_addr_16(ans_addr_16_sig) ,	// input [31:0] ans_addr_16_sig
	.ans_addr_17(ans_addr_17_sig) ,	// input [31:0] ans_addr_17_sig
	.ans_addr_18(ans_addr_18_sig) ,	// input [31:0] ans_addr_18_sig
	.ans_addr_19(ans_addr_19_sig) ,	// input [31:0] ans_addr_19_sig
	.ans_addr_20(ans_addr_20_sig) ,	// input [31:0] ans_addr_20_sig
	.ans_addr_21(ans_addr_21_sig) ,	// input [31:0] ans_addr_21_sig
	.ans_addr_22(ans_addr_22_sig) ,	// input [31:0] ans_addr_22_sig
	.ans_addr_23(ans_addr_23_sig) ,	// input [31:0] ans_addr_23_sig
	.ans_addr_24(ans_addr_24_sig) ,	// input [31:0] ans_addr_24_sig
	.ans_addr_25(ans_addr_25_sig) ,	// input [31:0] ans_addr_25_sig
	.ans_addr_26(ans_addr_26_sig) ,	// input [31:0] ans_addr_26_sig
	.ans_addr_27(ans_addr_27_sig) ,	// input [31:0] ans_addr_27_sig
	.ans_addr_28(ans_addr_28_sig) ,	// input [31:0] ans_addr_28_sig
	.ans_addr_29(ans_addr_29_sig) ,	// input [31:0] ans_addr_29_sig
	.ans_addr_30(ans_addr_30_sig) ,	// input [31:0] ans_addr_30_sig
	.a4_ans_addr(a4_ans_addr_sig) ,	// input [127:0] a4_ans_addr_sig
	.a4_ans_addr_2(a4_ans_addr_2_sig) ,	// input [127:0] a4_ans_addr_2_sig
	.a4_ans_addr_3(a4_ans_addr_3_sig) ,	// input [127:0] a4_ans_addr_3_sig
	.a4_ans_addr_4(a4_ans_addr_4_sig) ,	// input [127:0] a4_ans_addr_4_sig
	.a4_ans_addr_5(a4_ans_addr_5_sig) ,	// input [127:0] a4_ans_addr_5_sig
	.a4_ans_addr_6(a4_ans_addr_6_sig) ,	// input [127:0] a4_ans_addr_6_sig
	.a4_ans_addr_7(a4_ans_addr_7_sig) ,	// input [127:0] a4_ans_addr_7_sig
	.a4_ans_addr_8(a4_ans_addr_8_sig) ,	// input [127:0] a4_ans_addr_8_sig
	.ans_cname_1(ans_cname_1_sig) ,	// input [2047:0] ans_cname_1_sig
	.ans_cname_2(ans_cname_2_sig) ,	// input [2047:0] ans_cname_2_sig
	.ans_a_count(ans_a_count_sig) ,	// input [4:0] ans_a_count_sig
	.ans_aaaa_count(ans_aaaa_count_sig) ,	// input [2:0] ans_aaaa_count_sig
	.ans_cname_count(ans_cname_count_sig) ,	// input [1:0] ans_cname_count_sig
	.wb_addr_o(wb_addr_o_sig) ,	// output [24:0] wb_addr_o_sig
	.wb_data_o(wb_data_o_sig) ,	// output [31:0] wb_data_o_sig
	.wb_data_i(wb_data_i_sig) ,	// input [31:0] wb_data_i_sig
	.wb_we_o(wb_we_o_sig) ,	// output  wb_we_o_sig
	.wb_ack_i(wb_ack_i_sig) ,	// input  wb_ack_i_sig
	.wb_stb_o(wb_stb_o_sig) ,	// output  wb_stb_o_sig
	.wb_cyc_o(wb_cyc_o_sig) 	// output  wb_cyc_o_sig
);

