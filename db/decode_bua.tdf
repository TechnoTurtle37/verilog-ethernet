--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 22.1 cbx_cycloneii 2022:10:25:15:36:38:SC cbx_lpm_add_sub 2022:10:25:15:36:38:SC cbx_lpm_compare 2022:10:25:15:36:38:SC cbx_lpm_decode 2022:10:25:15:36:36:SC cbx_mgl 2022:10:25:15:36:55:SC cbx_nadder 2022:10:25:15:36:38:SC cbx_stratix 2022:10:25:15:36:38:SC cbx_stratixii 2022:10:25:15:36:38:SC  VERSION_END


-- Copyright (C) 2022  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_bua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1269w[1..0]	: WIRE;
	w_anode1278w[3..0]	: WIRE;
	w_anode1295w[3..0]	: WIRE;
	w_anode1305w[3..0]	: WIRE;
	w_anode1315w[3..0]	: WIRE;
	w_anode1325w[3..0]	: WIRE;
	w_anode1335w[3..0]	: WIRE;
	w_anode1345w[3..0]	: WIRE;
	w_anode1355w[3..0]	: WIRE;
	w_anode1367w[1..0]	: WIRE;
	w_anode1374w[3..0]	: WIRE;
	w_anode1385w[3..0]	: WIRE;
	w_anode1395w[3..0]	: WIRE;
	w_anode1405w[3..0]	: WIRE;
	w_anode1415w[3..0]	: WIRE;
	w_anode1425w[3..0]	: WIRE;
	w_anode1435w[3..0]	: WIRE;
	w_anode1445w[3..0]	: WIRE;
	w_data1267w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode1445w[3..3], w_anode1435w[3..3], w_anode1425w[3..3], w_anode1415w[3..3], w_anode1405w[3..3], w_anode1395w[3..3], w_anode1385w[3..3], w_anode1374w[3..3]), ( w_anode1355w[3..3], w_anode1345w[3..3], w_anode1335w[3..3], w_anode1325w[3..3], w_anode1315w[3..3], w_anode1305w[3..3], w_anode1295w[3..3], w_anode1278w[3..3]));
	w_anode1269w[] = ( (w_anode1269w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode1278w[] = ( (w_anode1278w[2..2] & (! w_data1267w[2..2])), (w_anode1278w[1..1] & (! w_data1267w[1..1])), (w_anode1278w[0..0] & (! w_data1267w[0..0])), w_anode1269w[1..1]);
	w_anode1295w[] = ( (w_anode1295w[2..2] & (! w_data1267w[2..2])), (w_anode1295w[1..1] & (! w_data1267w[1..1])), (w_anode1295w[0..0] & w_data1267w[0..0]), w_anode1269w[1..1]);
	w_anode1305w[] = ( (w_anode1305w[2..2] & (! w_data1267w[2..2])), (w_anode1305w[1..1] & w_data1267w[1..1]), (w_anode1305w[0..0] & (! w_data1267w[0..0])), w_anode1269w[1..1]);
	w_anode1315w[] = ( (w_anode1315w[2..2] & (! w_data1267w[2..2])), (w_anode1315w[1..1] & w_data1267w[1..1]), (w_anode1315w[0..0] & w_data1267w[0..0]), w_anode1269w[1..1]);
	w_anode1325w[] = ( (w_anode1325w[2..2] & w_data1267w[2..2]), (w_anode1325w[1..1] & (! w_data1267w[1..1])), (w_anode1325w[0..0] & (! w_data1267w[0..0])), w_anode1269w[1..1]);
	w_anode1335w[] = ( (w_anode1335w[2..2] & w_data1267w[2..2]), (w_anode1335w[1..1] & (! w_data1267w[1..1])), (w_anode1335w[0..0] & w_data1267w[0..0]), w_anode1269w[1..1]);
	w_anode1345w[] = ( (w_anode1345w[2..2] & w_data1267w[2..2]), (w_anode1345w[1..1] & w_data1267w[1..1]), (w_anode1345w[0..0] & (! w_data1267w[0..0])), w_anode1269w[1..1]);
	w_anode1355w[] = ( (w_anode1355w[2..2] & w_data1267w[2..2]), (w_anode1355w[1..1] & w_data1267w[1..1]), (w_anode1355w[0..0] & w_data1267w[0..0]), w_anode1269w[1..1]);
	w_anode1367w[] = ( (w_anode1367w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1374w[] = ( (w_anode1374w[2..2] & (! w_data1267w[2..2])), (w_anode1374w[1..1] & (! w_data1267w[1..1])), (w_anode1374w[0..0] & (! w_data1267w[0..0])), w_anode1367w[1..1]);
	w_anode1385w[] = ( (w_anode1385w[2..2] & (! w_data1267w[2..2])), (w_anode1385w[1..1] & (! w_data1267w[1..1])), (w_anode1385w[0..0] & w_data1267w[0..0]), w_anode1367w[1..1]);
	w_anode1395w[] = ( (w_anode1395w[2..2] & (! w_data1267w[2..2])), (w_anode1395w[1..1] & w_data1267w[1..1]), (w_anode1395w[0..0] & (! w_data1267w[0..0])), w_anode1367w[1..1]);
	w_anode1405w[] = ( (w_anode1405w[2..2] & (! w_data1267w[2..2])), (w_anode1405w[1..1] & w_data1267w[1..1]), (w_anode1405w[0..0] & w_data1267w[0..0]), w_anode1367w[1..1]);
	w_anode1415w[] = ( (w_anode1415w[2..2] & w_data1267w[2..2]), (w_anode1415w[1..1] & (! w_data1267w[1..1])), (w_anode1415w[0..0] & (! w_data1267w[0..0])), w_anode1367w[1..1]);
	w_anode1425w[] = ( (w_anode1425w[2..2] & w_data1267w[2..2]), (w_anode1425w[1..1] & (! w_data1267w[1..1])), (w_anode1425w[0..0] & w_data1267w[0..0]), w_anode1367w[1..1]);
	w_anode1435w[] = ( (w_anode1435w[2..2] & w_data1267w[2..2]), (w_anode1435w[1..1] & w_data1267w[1..1]), (w_anode1435w[0..0] & (! w_data1267w[0..0])), w_anode1367w[1..1]);
	w_anode1445w[] = ( (w_anode1445w[2..2] & w_data1267w[2..2]), (w_anode1445w[1..1] & w_data1267w[1..1]), (w_anode1445w[0..0] & w_data1267w[0..0]), w_anode1367w[1..1]);
	w_data1267w[2..0] = data_wire[2..0];
END;
--VALID FILE
