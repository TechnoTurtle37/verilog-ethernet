// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.


// Generated by Quartus Prime Version 22.1 (Build Build 915 10/25/2022)
// Created on Fri Apr  7 20:52:42 2023

analyzer analyzer_inst
(
	.rst(rst_sig) ,	// input  rst_sig
	.clk(clk_sig) ,	// input  clk_sig
	.pkt(pkt_sig) ,	// input [4095:0] pkt_sig
	.pkt_valid(pkt_valid_sig) ,	// input  pkt_valid_sig
	.pkt_ready(pkt_ready_sig) ,	// output  pkt_ready_sig
	.hdr_id(hdr_id_sig) ,	// output [15:0] hdr_id_sig
	.hdr_qr(hdr_qr_sig) ,	// output  hdr_qr_sig
	.hdr_opcode(hdr_opcode_sig) ,	// output [3:0] hdr_opcode_sig
	.hdr_aa(hdr_aa_sig) ,	// output  hdr_aa_sig
	.hdr_tc(hdr_tc_sig) ,	// output  hdr_tc_sig
	.hdr_rd(hdr_rd_sig) ,	// output  hdr_rd_sig
	.hdr_ra(hdr_ra_sig) ,	// output  hdr_ra_sig
	.hdr_z(hdr_z_sig) ,	// output [2:0] hdr_z_sig
	.hdr_rcode(hdr_rcode_sig) ,	// output [3:0] hdr_rcode_sig
	.hdr_qdcount(hdr_qdcount_sig) ,	// output [15:0] hdr_qdcount_sig
	.hdr_ancount(hdr_ancount_sig) ,	// output [15:0] hdr_ancount_sig
	.hdr_nscount(hdr_nscount_sig) ,	// output [15:0] hdr_nscount_sig
	.hdr_arcount(hdr_arcount_sig) ,	// output [15:0] hdr_arcount_sig
	.qry_name(qry_name_sig) ,	// output [252:0] qry_name_sig
	.qry_type(qry_type_sig) ,	// output [15:0] qry_type_sig
	.qry_class(qry_class_sig) ,	// output [15:0] qry_class_sig
	.ans_name(ans_name_sig) ,	// output [255:0] ans_name_sig
	.ans_type(ans_type_sig) ,	// output [15:0] ans_type_sig
	.ans_class(ans_class_sig) ,	// output [15:0] ans_class_sig
	.ans_ttl(ans_ttl_sig) ,	// output [31:0] ans_ttl_sig
	.ans_datalen(ans_datalen_sig) ,	// output [15:0] ans_datalen_sig
	.ans_addr(ans_addr_sig) 	// output [31:0] ans_addr_sig
);

